<div class="articles-container">
    <% if user_signed_in? %>
        <div class='left-section'>
            <%= render 'your_articles', your_articles: current_user.articles, articles_title: 'Your Articles' %>
        </div>
    <% else %>
        <div class='left-section'>
            <%= render 'your_articles', your_articles: @articles, articles_title: 'Recents' %>
        </div>
    <% end %>
    
    <div class="right-section">
        <div class='search-bar'>
            <form id='searchForm'>
                <input placeholder='Search for Articles' id='search-input'/>
                <button type='submit' id='search-submit'>Submit</button>
            </form>
        </div>
        <div>
            <h3>Search Records</h3>
             <h4 id='ip_address'></h4>
             <ul id='search-records' class='search-records'>
            
            </ul>
            <h3>Session Search Records</h3>
             <ul id='session-search-records' class='search-records'>
            
            </ul>
        </div>
        <%= render 'articles' %>

        <script>
        document.addEventListener('turbo:load', function() {
            const searchInput = document.getElementById('search-input');
            const searchBtn = document.getElementById('search-submit');

            var ip_address_id;

            fetch(`articles.json`)
                            .then(response => response.json())
                            .then(data => displaySearchResults(data))
                            .catch(error => console.error('Error fetching search results:', error));
                
            fetch(`ip_addresses.json`)
                        .then(response => response.json())
                        .then(data => ListSearchRecords(data.id, data.address, data.searches))
                        .catch(error => console.error('Error fetching search records:', error));

            

            if (!sessionStorage.getItem('searchKeywords')) {
                sessionStorage.setItem('searchKeywords', JSON.stringify([]));
            }

            let lastSearchQuery = '';
            const debounceDelay = 1000;

            const recordSearch = (query, ip_address_id) => {
                console.log('I am about to record search');

                fetch('/searches', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': getCSRFToken(),
                    },
                    body: JSON.stringify({ query, ip_address_id }),
                })
                .then(response => response.json())
                .then(data => console.log(data)
                .catch(error => console.error('Error recording search:', error)));
            }

            const createIp = () => {
                console.log('I am about to  create ip');

                fetch('/ip_addresses', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': getCSRFToken(),
                    },
                    body: JSON.stringify({}),
                })
                .then(response => response.json())
                .then(data => console.log(data)
                .catch(error => console.error('Error creating ip:', error)));
            }

            const handleSearchInput = () =>  {
                const query = event.target.value.trim();
                console.log('query', query)
                storeSearches(query);
                
                if(query) {
                    fetch(`articles.json?query=${encodeURIComponent(query)}`)
                        .then(response => response.json())
                        .then(data => displaySearchResults(data))
                        .catch(error => console.error('Error fetching search results:', error));

                    fetch(`ip_addresses.json`)
                        .then(response => response.json())
                        .then(data => {
                            if(data) {
                                ListSearchRecords(data.address, data.searches)
                            } else {
                                createIp();
                            }
                        })
                        .catch(error => console.error('Error fetching search records:', error));
                    
                }
                console.log('next create ip');
                console.log('now check session storage', sessionStorage.getItem('searchKeywords'));
                const records = sessionStorage.getItem('searchKeywords')
                // if(records) ListSessionSearchRecords(records);
            };

            function displaySearchResults(articles) {
                const searchResultsContainer = document.getElementById('articles-wrapper');
                searchResultsContainer.innerHTML = '';

                if(articles.length > 0) {
                    const ul = document.createElement('ul');

                    articles.forEach(article => {
                        const li = document.createElement('li');

                        const a = document.createElement('a');
                        a.setAttribute('href', `/articles/${article.id}`)
                        
                        const h2 = document.createElement('h2');
                        h2.textContent = article.title;
                        h2.classList.add('article-title')

                        const p = document.createElement('p');
                        p.textContent = article.body;
                        p.classList.add('article-body');

                        a.appendChild(h2);

                        li.appendChild(a);
                        li.appendChild(p);
                    
                        ul.appendChild(li);
                    });

                    searchResultsContainer.appendChild(ul);
                } 
            }

            const ListSearchRecords = (id, address, searches) => {
                console.log('my records', searches);
                const listItems = document.getElementById('search-records');
                listItems.innerHTML = '';
                const ip = document.getElementById('ip_address');
                ip_address_id = id;
                
                if(searches.length > 0) {
                    ip.textContent = `Searches IP: ${address}`;
                    searches.forEach(record => {
                        const li = document.createElement('li');
                        li.textContent = record.query;
                        listItems.appendChild(li);
                    })
                }
            }


            const ListSessionSearchRecords = (records) => {
                const listItems = document.getElementById('session-search-records');
                listItems.innerHTML = '';
                console.log('session records to list', records);

                if(records.length > 0) {
                     records.forEach(record => {
                        const li = document.createElement('li');
                        li.textContent = record;
                        listItems.appendChild(li);
                    })
                }
            }

            function getCSRFToken() {
                const csrfTokenMeta = document.head.querySelector('meta[name="csrf-token"]');
                console.log('mycsrdTokenMeta', csrfTokenMeta);
                return csrfTokenMeta ? csrfTokenMeta.content : '';
            }

            const storeSearches = (newKeyword) => {
                if (!sessionStorage.getItem('searchKeywords')) {
                    sessionStorage.setItem('searchKeywords', JSON.stringify([]));
                }
                if (newKeyword !== '') {
                    const existingKeywords = JSON.parse(sessionStorage.getItem('searchKeywords')) || [];
                    const newKeywords = [];
                    let valid = true;
                    let newKeyWordRegex = new RegExp(newKeyword);
                    for (let i = 0; i < existingKeywords.length; i++) {
                        let keyword = existingKeywords[i];
                        let keywordRegex = new RegExp(keyword);
                        if(keyword.match(newKeyWordRegex)) {
                            valid = false;
                            break;
                        } 
                        if(!newKeyword.match(keywordRegex)) {
                            newKeywords.push(keyword);
                        }
                    }
    
                    if (valid) {
                        newKeywords.push(newKeyword);
                        sessionStorage.setItem('searchKeywords', JSON.stringify(newKeywords));

                        console.log('Updated Search Keywords:', newKeywords);
                    } else {
                        console.log('Keyword already exists:', newKeyword);
                    }
                }
            }
            
            const handleSearchesRecord = () => {
                console.log('handleSearchesReecored trigered')
                const searchKeywords = JSON.parse(sessionStorage.getItem('searchKeywords'));

                if (ip_address_id && searchKeywords && searchKeywords.length > 0) {
                    searchKeywords.forEach(keyword => {
                        recordSearch(keyword, ip_address_id);
                    });
                }
                sessionStorage.removeItem('searchKeywords');
            };
    
                searchInput.addEventListener('input', handleSearchInput);
                window.addEventListener('beforeunload', handleSearchesRecord);
                window.addEventListener('unload', handleSearchesRecord);
                searchBtn.addEventListener('submit', handleSearchesRecord);
                searchBtn.addEventListener('input', handleSearchesRecord);

            });

    </script>
    </div>
</div>